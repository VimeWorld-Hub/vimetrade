const {Keyboard} = require('vk-io')

const mysql = require('../index').mysql
const messages = require('../libs/messages')
const config = require('../config')

const vk = require('../index').vk
const md5 = require("md5")
const generator = require('generate-password')
const axios = require("axios")


module.exports.info = {
    name: 'profile',
    usage: "",
    aliases: 'profile, me, —è',
    description: '—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
    permission: 1,
    enabled: true,
    help: true
};

module.exports.run = async (context) => {
    const u = await mysql.execute(`SELECT * FROM users WHERE vk = ?`, [context.senderId])
    const sells = await mysql.execute(`SELECT * FROM sells WHERE vk = ?`, [context.senderId])
    const user_name = await vk.api.users.get({user_id: context.message.from_id})

    context.reply({
        message: `‚óè‚îÅ‚îÅ‚îÅ‚îÅ‚àò ${user_name[0].first_name} ${user_name[0].last_name} ‚àò‚îÅ‚îÅ‚îÅ‚îÅ‚óè`
            + `\n\nüíé –°—Ç–∞—Ç—É—Å: ${await messages.getRank(u[0].status)}`
            + `\nüë®‚Äçüíª –ù–∏–∫–Ω–µ–π–º: ${(u[0].username == '-1') ? '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω' : u[0].username}`
            + `\n\nüí∂ –†—É–±–ª–µ–π: ${u[0].rubs}`
            + `\nüí∏ –í–∏–º–µ—Ä–æ–≤: ${u[0].vimers}`
            + `\n\nüõí –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${sells.length}`
            + `\n\n`
            + `\n`,
        disable_mentions: 1,
        dont_parse_links: 1,
        keyboard: Keyboard.builder()
            .inline()
            .textButton({
                label: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                payload: `profile:addbalance`,
                color: Keyboard.POSITIVE_COLOR
            })
            .textButton({
                label: "üì§ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏",
                payload: `profile:withdrawal`,
                color: Keyboard.NEGATIVE_COLOR
            })
            .row()
            .textButton({
                label: "üìß –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                payload: `unsell`,
                color: Keyboard.PRIMARY_COLOR
            })
            .textButton({
                label: "üì≠ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π",
                payload: `history`,
                color: Keyboard.PRIMARY_COLOR
            })
    })
}

module.exports.runPayload = async (context) => {
    const delim = context.messagePayload.split(":")
    const user = await mysql.execute('SELECT * FROM users WHERE vk = ?', [context.senderId])

    switch (delim[1]) {
        case 'pays_methods':
            return context.reply('üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ:\n‚óè –ö–æ–º–∏—Å—Å–∏—è: 5%\n‚óè –õ–∏–º–∏—Ç—ã: 75-70000 RUB\n\nüì≥ Qiwi:\n ‚óè –ö–æ–º–∏—Å—Å–∏—è: 4%\n‚óè –õ–∏–º–∏—Ç—ã: 50-15000 RUB\n\nüïé YooMoney:\n ‚óè –ö–æ–º–∏—Å—Å–∏—è: 4%\n‚óè –õ–∏–º–∏—Ç—ã: 15-15000 RUB'
                    + '\n\nüåÄ FKWallet:\n‚óè –ö–æ–º–∏—Å—Å–∏—è: 0%\n‚óè –õ–∏–º–∏—Ç—ã: 10-300000 RUB')
                    + '\n\nü•∏ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:\n‚óè –ö–æ–º–∏—Å—Å–∏—è: 0.5%\n‚óè –õ–∏–º–∏—Ç—ã: ~500$ (–¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã —Å–≤–æ–π)'
        case 'withdrawal':
            const ans = await context.question({
                    message: `üì• | –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏`,
                    keyboard: Keyboard.builder()
                        .inline()
                        .textButton({
                            label: "–†—É–±–ª–∏",
                            payload: `rubs`,
                            color: Keyboard.SECONDARY_COLOR
                        })
                        .textButton({
                            label: "–í–∏–º–µ—Ä—ã",
                            payload: `vimers`,
                            color: Keyboard.SECONDARY_COLOR
                        })
                        .row()
                        .textButton({
                            label: "–û—Ç–º–µ–Ω–∞",
                            payload: `cancel`,
                            color: Keyboard.PRIMARY_COLOR
                        })
                }
            );
            if (!ans.payload) {
                return context.reply('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')
            }

            if (ans.payload === 'vimers') {
                let vimers = await context.question({
                        message: 'üí≥ | –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –≤ –≤–∏–º–µ—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏'
                    }
                );
                vimers = vimers.text

                if (!await messages.isValidSum(vimers))
                    return context.send('‚ùå | –°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')

                if (vimers < 15)
                    return context.send('‚ùå | –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 14')

                if (vimers > user[0].vimers)
                    return context.send('‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')

                let username = await context.question({
                        message: 'üí≥ | –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∏–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã –∑–∞—á–∏—Å–ª–∏—Ç—å—Å—è –≤–∏–º–µ—Ä—ã'
                    }
                );
                username = username.text

                if (/\w/.test(username) === false)
                    return context.send('‚ùå | –ù–∏–∫ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ')

                let ok = await context.question({
                        message: `üõí –í—ã–≤–µ—Å—Ç–∏ ${await messages.plurals(vimers - messages.getComm(vimers), "–≤–∏–º–µ—Ä", "–≤–∏–º–µ—Ä–∞", "–≤–∏–º–µ—Ä–æ–≤")}?\n‚îî –ö–æ–º–∏—Å—Å–∏—è: ${await messages.plurals(messages.getComm(vimers), "–≤–∏–º–µ—Ä", "–≤–∏–º–µ—Ä–∞", "–≤–∏–º–µ—Ä–æ–≤")}`,
                        keyboard: Keyboard.builder()
                            .inline()
                            .textButton({
                                label: "–î–∞",
                                payload: "yes",
                                color: Keyboard.POSITIVE_COLOR
                            })
                            .textButton({
                                label: "–ù–µ—Ç",
                                payload: "no",
                                color: Keyboard.NEGATIVE_COLOR
                            })
                    }
                );

                if (ok.payload !== 'yes') return context.send('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')
                try {
                    const res = await axios.get(`${config.vimeworld.vimeapi_domen}/giveVimers.php?token=${config.vimeworld.vimeapi_token}&to=${username}&vimers=${vimers - messages.getComm(vimers)}`)
                    const comka = await axios.get(`${config.vimeworld.vimeapi_domen}/giveVimers.php?token=${config.vimeworld.vimeapi_token}&to=CharkosOff&vimers=${messages.getComm(vimers)}`)

                    if (res.data.code != 1 && comka.data.code != 1)
                        return context.reply(`‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–º–µ—Ä—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã..`)

                    await mysql.execute('UPDATE `users` SET `vimers`=? WHERE vk = ?', [Number(user[0].vimers) - Number(vimers), context.senderId])
                    context.send({
                        message: `‚úÖ | –í–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã. –û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤`,
                        keyboard: Keyboard.builder()
                            .inline()
                            .urlButton({
                                label: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
                                url: "https://vk.com/topic-207749865_48239853"
                            })
                    })
                } catch (e) {
                    context.send(`‚ùå | –ü—Ä–∏ –≤—ã–≤–æ–¥–µ –≤–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞..\n\n${e}`)
                }
            } else if (ans.payload === 'rubs') {
                let rubs = await context.question({
                        message: 'üí≥ | –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏'
                    }
                );
                if (rubs.payload) return context.send('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')
                rubs = rubs.text

                if (!await messages.isValidSum(rubs))
                    return context.send('‚ùå | –°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')

                if (rubs < 2)
                    return context.send('‚ùå | –í—ã–≤–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç –¥–≤—É—Ö —Ä—É–±–ª–µ–π')

                if (user[0].rubs < rubs)
                    return context.send('‚ùå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')

                let to = await context.question({
                        message: 'üí≥ | –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ QIWI –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä +79687584492), –∏–ª–∏ –∞–¥—Ä–µ—Å –ÆMoney'
                    }
                );
                if (to.payload) return context.send('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')

                let ok = await context.question({
                        message: `üõí | –í—ã–≤–µ—Å—Ç–∏ ${await messages.plurals(rubs - messages.getComm(rubs), "—Ä—É–±–ª—å", "—Ä—É–±–ª—è", "—Ä—É–±–ª–µ–π")}?\n‚îî –ö–æ–º–∏—Å—Å–∏—è: ${await messages.plurals(messages.getComm(rubs), "—Ä—É–±–ª—å", "—Ä—É–±–ª—è", "—Ä—É–±–ª–µ–π")}`,
                        keyboard: Keyboard.builder()
                            .inline()
                            .textButton({
                                label: "–î–∞",
                                payload: "yes",
                                color: Keyboard.POSITIVE_COLOR
                            })
                            .textButton({
                                label: "–ù–µ—Ç",
                                payload: "no",
                                color: Keyboard.NEGATIVE_COLOR
                            })
                    }
                );

                if (ok.payload !== 'yes') return context.send('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')
                await mysql.execute('UPDATE `users` SET `rubs`=? WHERE vk = ?', [Number(user[0].rubs) - Number(rubs), context.senderId])

                let summa = rubs - messages.getComm(rubs)
                let comm = messages.getComm(rubs)

                if (user[0].status == '3') {
                    comm = '0 (–≤—ã–≤–æ–¥–∏—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)'
                    summa = rubs
                }

                context.send('‚úÖ | –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24-—Ö —á–∞—Å–æ–≤')
                await vk.api.messages.send({
                    user_id: 584536789,
                    random_id: 0,
                    message: `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥:\n–ö–æ—à–µ–ª–µ–∫: ${to.text}\n–°—É–º–º–∞: ${summa}\n–ö–æ–º–∏—Å—Å–∏—è: ${comm}`,
                    keyboard: Keyboard.builder()
                        .inline()
                        .textButton(({
                            label: "–í—ã–≤–µ–ª",
                            payload: `successPayment:${context.senderId}`
                        }))
                })
            } else {
                return context.reply('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')
            }
            break
        case 'addbalance':
            const answer = await context.question({
                    message: `üì• | –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∏–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è`,
                    keyboard: Keyboard.builder()
                        .inline()
                        .textButton({
                            label: "–†—É–±–ª–∏",
                            payload: `rubs`,
                            color: Keyboard.SECONDARY_COLOR
                        })
                        .textButton({
                            label: "–í–∏–º–µ—Ä—ã",
                            payload: `vimers`,
                            color: Keyboard.SECONDARY_COLOR
                        })
                        .row()
                        .textButton({
                            label: "–û—Ç–º–µ–Ω–∞",
                            payload: `cancel`,
                            color: Keyboard.PRIMARY_COLOR
                        })
                }
            );

            if (answer.payload === "vimers") {
                let from = user[0].username

                if(from == '-1')
                    return context.send({
                        message: '‚ùå | –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç VimeWorld',
                        keyboard: Keyboard.builder()
                            .inline()
                            .textButton({
                                label: '–ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º',
                                payload: 'link'
                            })
                    })

                if (from.toLowerCase() === 'vimetrade_bot')
                    return context.send('‚ùå | –ü–µ—Ä–µ–≤–æ–¥ —Å–æ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –Ω–∏–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω')

                context.reply(`üí≥ | –ü–µ—Ä–µ–≤–µ–¥–∏ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (${user[0].username}) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–º–µ—Ä–æ–≤ –Ω–∞ –Ω–∏–∫ VimeTrade_Bot`, {
                    keyboard: Keyboard.builder()
                        .inline()
                        .urlButton({
                            label: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏",
                            url: "https://vk.cc/c6WnTe"
                        })
                })
                return
            } else if (answer.payload === "cancel") {
                return context.send(`‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..`)
            } else {
                let rubs = await context.question({
                        message: 'üí≥ | –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å'
                    }
                );
                if (rubs.payload)
                    return context.reply('‚ùå | –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞..')
                rubs = rubs.text

                if (!await messages.isValidSum(rubs))
                    return context.send('‚ùå | –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')

                if (rubs <= 2)
                    return context.send('‚ùå | –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–≤—É—Ö')

                const bill = md5(generator.generate({
                    length: 32,
                    numbers: true
                }))


                try {
                    await mysql.execute(
                        'INSERT INTO `orders_rub`(`id`, `vk`, `amount`) VALUES (?, ?, ?)',
                        [bill, context.senderId, rubs]
                    )

                    const link = messages.getPayment(rubs, bill)

                    const vkcc = await require('../index').vk.api.utils.getShortLink({
                        url: link,
                        private: 0
                    })

                    context.reply({
                        message: `üí≥ | –•–æ—Ä–æ—à–æ. –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª, –∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂¬ª`,
                        keyboard: Keyboard.builder()
                            .inline()
                            .urlButton({
                                url: vkcc.short_url,
                                label: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
                            })
                            .row()
                            .textButton({
                                label: "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
                                payload: `${this.info.name}:pays_methods`,
                                color: Keyboard.PRIMARY_COLOR
                            })
                    })
                } catch (e) {
                    context.reply({
                        message: 'üö´ | –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞'
                    })
                    console.error(e)
                }
            }
            break
        default:
            this.run(context)
    }
}